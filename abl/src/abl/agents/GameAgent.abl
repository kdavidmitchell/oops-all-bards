package abl.generated;
// the package corresponds to where generated Java files are placed.

import abl.wmes.*;
import abl.actions.*;
import abl.sensors.*;

behaving_entity GameAgent {

    parallel behavior lookForAllyAgent() {
        AllyWME newAllyWME;
        ParallelBehaviorWME spawnPointWME;

        // wait for an unrecognized AllyWME to appear? what is adding AllyWMEs to memory in the first place?
        with ( success_test { newAllyWME = (AllyWME onTree==false) } ) wait;
        // this is ok -- merge the success tests and be explicit about spawn POINTS being different from behaviors (manageAllyAgentSpawnPoint)
        with ( success_test { spawnPointWME = (ParallelBehaviorWME signature=="ManageAllyAgent()") } ) wait;
        spawngoal createAllyAgent(newAllyWME) at spawnPointWME;
        mental_act {
            newAllyWME.setOnTree(true);
        }
    }

    // Does this actually go here? Is this what we're looking for?
    parallel behavior createAllyAgent(AllyWME ally) {
        mental_act {
            BehavingEntity.getBehavingEntity().addWME(ally);
        }
    }

    parallel behavior manageAllyAgent() {
        subgoal waitForTurn();
        subgoal lookForQuip();
        subgoal lookToHelp();
        subgoal lookToHinder(); 
    }

    parallel behavior waitForTurn() {
        AllyWME ally;

        with ( success_test { ally = (AllyWME inCombat==true) } ) wait;
        // Can this be done? Specifically, can we wait for any AllyWME to be marked as in combat, and then can we
        // test on that SAME AllyWME like below to see if it's that ally's turn?
        with ( success_test { ally.ownsTurn==true } ) wait;

        subgoal pickCombatAction(ally);
    }

    parallel behavior pickCombatAction(AllyWME ally) {
        // helping friends should be highest priority
        // hindering enemies should be second highest priority
    }

    // This is a collection behavior s.t. all children act in parallel and never result in failure
    initial_tree {
    	with (priority 3) mental_act {
			System.out.println("Starting game agent...");
    	}
    	
        subgoal lookForAllyAgent();
        subgoal manageAllyAgent();
    }
}