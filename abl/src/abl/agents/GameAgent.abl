package abl.generated;
// the package corresponds to where generated Java files are placed.

import abl.wmes.*;
import abl.actions.*;
import abl.sensors.*;

behaving_entity GameAgent {

    // register wme AllyWME with AllySensor;

    sequential behavior lookForAllyAgent() {
        AllyWME newAllyWME;
        ParallelBehaviorWME spawnLocation;

        with ( success_test { newAllyWME = (AllyWME OnTree==false) spawnLocation = (ParallelBehaviorWME signature=="AllyAgentRoot()") } ) wait;
        spawngoal manageAllyAgent(newAllyWME) at spawnLocation;
        mental_act { // atomic?
            newAllyWME.setOnTree(true);
        }
    }

    parallel behavior allyAgentRoot() {
        // with (persistent) subgoal wait;
    }

    parallel behavior manageAllyAgent(AllyWME allyAgent) {
        with (persistent) subgoal manageCombat(allyAgent);
        with (persistent) subgoal manageNoncombat(allyAgent);
        with (persistent) subgoal lookForQuip(allyAgent); 
    }

    parallel behavior manageCombat(AllyWME allyAgent) {
        with ( success_test { ( allyAgent.inCombat==true ) } ) wait;
        
        subgoal lookToAssist(allyAgent);
        subgoal waitForTurn(allyAgent);
    }

    parallel behavior waitForTurn(AllyWME allyAgent) {
        with ( success_test { (allyAgent.ownsTurn==true) } ) wait;

        subgoal takeTurn(allyAgent);
    }

    parallel behavior lookToAssist(AllyWME allyAgent) {
        TurnWME turnWME;

        with ( success_test { turnWME = (TurnWME turnOwner!=allyAgent.id) } ) wait;
    }

    // This is a collection behavior s.t. all children act in parallel and never result in failure
    initial_tree {
    	with (priority 3) mental_act {
			System.out.println("Starting game agent...");
    	}
    	
        subgoal lookForAllyAgent();
    }
}